use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
};

// Define the struct to hold the coin flip game state
struct CoinFlipGame {
    // User's token balance
    balance: u64,
    // User's chosen side (0 or 1)
    side: u8,
}

// Define the entry point for the program
entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    // Unpack the accounts
    let account_iter = &mut accounts.iter();
    let user_account = next_account_info(account_iter)?;
    let program_account = next_account_info(account_iter)?;

    // Unpack the instruction data
    let side = instruction_data[0];

    // Generate a random number (0 or 1) to simulate the coin flip
    let flip_result = (rand::random::<u8>() % 2) as u8;

    // Update the user's token balance based on the game outcome
    if flip_result == side {
        // User wins, double their token balance
        **user_account.try_borrow_mut_lamports()? += 2 * **user_account.lamports.borrow();
    } else {
        // User loses, reset their token balance to 0
        **user_account.try_borrow_mut_lamports()? = 0;
    }

    // Log the transaction
    msg!("Coin flip game result: {}", flip_result);

    Ok(())
}
